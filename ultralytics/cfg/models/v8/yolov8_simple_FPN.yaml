nc: 3
# ch: [3]

# ----------------------
# Backbone (YOLOv8n-style)
# ----------------------
backbone:
  - [-1, 1, Conv, [64, 3, 2]]          # 0: P1/2
  - [-1, 1, Conv, [128, 3, 2]]         # 1: P2/4
  - [-1, 3, C2f, [128, True]]          # 2
  - [-1, 1, Conv, [256, 3, 2]]         # 3: P3/8
  - [-1, 6, C2f, [256, True]]          # 4 → C3
  - [-1, 1, Conv, [512, 3, 2]]         # 5: P4/16
  - [-1, 6, C2f, [512, True]]          # 6 → C4
  - [-1, 1, Conv, [1024, 3, 2]]        # 7: P5/32
  - [-1, 3, C2f, [1024, True]]         # 8
  - [-1, 1, SPPF, [1024, 5]]           # 9 → C5

# ----------------------
# Neck + Head (Standard FPN)
# ----------------------
head:
  - [4, 1, Conv, [256, 1, 1]]          # 10: C3 reduced → P3
  - [6, 1, Conv, [256, 1, 1]]          # 11: C4 reduced → P4
  - [9, 1, Conv, [256, 1, 1]]          # 12: C5 reduced → P5

  - [12, 1, nn.Upsample, [None, 2, "nearest"]]  # 13: upsample P5
  - [[11, 13], 1, Concat, [1]]         # 14: fuse P4 + upP5
  - [-1, 1, C2f, [256]]                # 15: fused P4

  - [15, 1, nn.Upsample, [None, 2, "nearest"]]  # 16: upsample fused P4
  - [[10, 16], 1, Concat, [1]]         # 17: fuse P3 + upP4
  - [-1, 1, C2f, [256]]                # 18: fused P3

  - [[18, 15, 12], 1, Detect, [nc]]    # 19: Detect heads on P3, P4, P5
